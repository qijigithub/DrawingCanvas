{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","initialData","canvasRef","useRef","contextRef","isDrawing","setIsDrawing","useEffect","canvas","current","width","window","innerWidth","height","innerHeight","style","context","getContext","scale","lineCap","strokeStyle","lineWidth","className","border","onMouseDown","nativeEvent","offsetX","offsetY","beginPath","moveTo","onMouseUp","closePath","onMouseMove","lineTo","stroke","ref","completed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+KAmEeA,EAjEG,WAAK,IAAD,EACkBC,mBAAS,CAAC,KAD5B,mBACbC,EADa,KAWdC,GAXc,KAWFC,iBAAO,OACnBC,EAAaD,iBAAO,MAZN,EAaaH,oBAAS,GAbtB,mBAabK,EAba,KAaHC,EAbG,KAcpBC,qBAAU,WACR,IAAMC,EAAQN,EAAUO,QACxBD,EAAOE,MAA0B,EAAlBC,OAAOC,WACtBJ,EAAOK,OAA4B,EAAnBF,OAAOG,YACvBN,EAAOO,MAAML,MAAb,UAAwBC,OAAOC,WAA/B,MACAJ,EAAOO,MAAMF,OAAb,UAAyBF,OAAOG,YAAhC,MAMA,IAAME,EAAUR,EAAOS,WAAW,MAClCD,EAAQE,MAAM,EAAE,GAChBF,EAAQG,QAAS,QACjBH,EAAQI,YAAc,QACtBJ,EAAQK,UAAY,EACpBjB,EAAWK,QAAUO,IACrB,IAmBF,OACE,sBAAKM,UAAU,MAAf,UACE,gDACA,wBAAQP,MAAO,CAACQ,OAAO,qBACvBC,YAtBgB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,YACbC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAChBvB,EAAWK,QAAQmB,YACnBxB,EAAWK,QAAQoB,OAAOH,EAASC,GACnCrB,GAAa,IAmBXwB,UAjBiB,WACnB1B,EAAWK,QAAQsB,YACnBzB,GAAa,IAgBX0B,YAdS,SAAC,GAAiB,IAAhBP,EAAe,EAAfA,YACb,GAAIpB,EAAJ,CAD4B,IAIrBqB,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAChBvB,EAAWK,QAAQwB,OAAOP,EAASC,GACnCvB,EAAWK,QAAQyB,WASjBC,IAAMjC,IAEN,6BAAKD,EAAYmC,gBCjDRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.99ab09f3.chunk.js","sourcesContent":["\nimport React ,{useState,useEffect,useRef} from 'react';\nexport const App= ()=>{\n  const [initialData, setinitialData] = useState([{}]);\n  // useEffect(()=>{\n  //   fetch('/api').then(\n  //     response=>response.json()\n  //   ).then(\n  //     data => {\n  //       console.log(data)\n  //       setinitialData(data)}\n  //   )\n  // },[])\n  const canvasRef = useRef(null)\n  const contextRef = useRef(null)\n  const [isDrawing,setIsDrawing] = useState(false)\n  useEffect(()=>{\n    const canvas= canvasRef.current;\n    canvas.width = window.innerWidth*2;\n    canvas.height = window.innerHeight*2;\n    canvas.style.width = `${window.innerWidth}px`;\n    canvas.style.height = `${window.innerHeight}px`;\n    // canvas.width = 500*2;\n    // canvas.height = 500*2;\n    // canvas.style.width = `500px`;\n    // canvas.style.height = `500px`;\n    \n    const context = canvas.getContext(\"2d\");\n    context.scale(2,2)\n    context.lineCap =\"round\"\n    context.strokeStyle = \"black\"\n    context.lineWidth = 5\n    contextRef.current = context;\n  },[])\n  const startDrawing =({nativeEvent})=>{\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.beginPath()\n    contextRef.current.moveTo(offsetX, offsetY)\n    setIsDrawing(true)\n  }\n  const finishDrawing =()=>{\n    contextRef.current.closePath()\n    setIsDrawing(false)\n  }\n  const draw = ({nativeEvent})=>{\n    if(!isDrawing) {\n      return\n    }\n    const {offsetX, offsetY} = nativeEvent;\n    contextRef.current.lineTo(offsetX, offsetY)\n    contextRef.current.stroke()\n  }\n  return (\n    <div className=\"App\">\n      <h1>Drawing Canvas</h1>\n      <canvas style={{border:\"1px solid #000000\"}}\n      onMouseDown={startDrawing}\n      onMouseUp={finishDrawing}\n      onMouseMove= {draw}\n      ref= {canvasRef}\n      />\n      <h1>{initialData.completed}</h1>\n    </div>\n  );\n\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}