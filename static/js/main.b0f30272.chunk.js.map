{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","color","strokeSize","redraw","ctx","document","querySelector","getContext","strokeStyle","lineWidth","strokeRect","window","innerWidth","innerHeight","resizeCanvas","canvas","width","height","changeColorAndSize","data","React","useEffect","addEventListener","painting","startPosition","e","draw","endPosition","beginPath","preventDefault","lineCap","type","lineTo","touches","clientX","clientY","stroke","moveTo","className","id","onClick","style","position","left","top","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","console","log","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","publicUrl","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b0f30272.chunk.js","sourcesContent":["\nimport React from 'react';\nimport './App.css';\nexport const App= ()=>{\n\n\n  let color;\n  let strokeSize;\n  // const canvasRef = React.useRef();\n\n  /// assuming canvas variable exists in global scope\n  // const PureCanvas = React.forwardRef((props, ref) => <canvas ref={ref} />);\n//   function setCanvasElementSize () {\n//     // Also define the gap we want at the edges:\n// const edgeMargin = 10\n//     const canvas = document.querySelector(\"#canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const windowWidth = window.innerWidth;\n//     const windowHeight = window.innerHeight;\n//     const canvasAspectRatio = windowWidth / windowHeight;\n  \n//     // Work out the orientation of the device.\n//     const isPortrait = window.innerHeight > window.innerWidth;\n//     console.log('window width* heing', window.innerWidth, window.innerHeight, 'isPortrait' ,isPortrait)\n//     if (isPortrait) {\n    \n//       // We want to constrain the canvas by its width\n//       ctx.canvas.width  = windowWidth - (2 * edgeMargin);\n//       // The height depends on the width to ensure we don't stretch pixels\n//       // on the canvas.\n//       ctx.canvas.height = ctx.canvas.width / canvasAspectRatio;\n//       // ctx.canvas.width =  windowWidth - (2 * edgeMargin);\n//       // ctx.canvas.height = ctx.canvas.width / canvasAspectRatio;\n//     } else {\n//       // constrain by height\n//       // canvas.style.height = windowHeight - (2 * edgeMargin);\n//       // canvas.style.width = canvas.style.height * canvasAspectRatio;\n//       ctx.canvas.height = windowHeight - (2 * edgeMargin);\n//       ctx.canvas.width = ctx.canvas.height * canvasAspectRatio;\n//     }\n//   }\n  \n  // Call the function once initially to size the canvas\n  \n  // React.useEffect(() => {\n  //   // window.screen.orientation.lock('landscape');\n  //   // const ctx = canvasRef.current.getContext(\"2d\");\n  //   const canvas = document.querySelector(\"#canvas\");\n  //   const ctx = canvas.getContext(\"2d\");\n  //   // requestAnimationFrame(() => draw(ctx));\n\n    // const handleResize = e => {\n    //   ctx.canvas.height = window.innerHeight;\n    //   ctx.canvas.width = window.innerWidth;\n    // }\n\n  //   setCanvasElementSize();\n  //   window.addEventListener(\"resize\",   setCanvasElementSize);\n\n  //   return () => window.removeEventListener(\"resize\",   setCanvasElementSize);\n    \n  // }, []);\n  // const canvas = document.querySelector(\"#canvas\");\n  // const ctx = canvas.getContext(\"2d\");\n\n  function redraw() {\n    const canvas = document.querySelector(\"#canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = '5';\n    ctx.strokeRect(0, 0, window.innerWidth, window.innerHeight);\n  }\n\n  function resizeCanvas() {\n     const canvas = document.querySelector(\"#canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    redraw();\n  }\n\n\n  React.useEffect(() => {\n    window.addEventListener('resize', resizeCanvas, false);\n    // Draw canvas border for the first time.\n    // resizeCanvas();\n  }, []);\n  function changeColorAndSize(data, width) {\n    color = data;\n    strokeSize = width;\n  }\n  window.addEventListener(\"load\", () => {\n    const canvas = document.querySelector(\"#canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    //resizing\n    canvas.height = window.innerHeight;\n    canvas.width = window.innerWidth;\n    // ctx.canvas.width =window.innerWidth;;\n    // ctx.canvas.height = window.innerHeight;\n    // setCanvasElementSize();\n    // handleResize(e)\n    redraw()\n    //variables\n    let painting = false;\n  \n    //functions\n    function startPosition(e) {\n      painting = true;\n      draw(e);\n    }\n  \n    function endPosition() {\n      painting = false;\n      ctx.beginPath();\n    }\n  \n    function draw(e) {\n      if (!painting) {\n        return;\n      }\n      \n      e.preventDefault();\n      ctx.lineWidth = strokeSize;\n      ctx.lineCap = \"round\";\n   \n      // ctx.lineTo(e.clientX, e.clientY);\n      if (e.type === 'touchmove'){\n        ctx.lineTo(e.touches[0].clientX, e.touches[0].clientY);\n      } else if (e.type === 'mousemove'){\n        ctx.lineTo(e.clientX, e.clientY);\n      }\n        \n      ctx.stroke();\n      ctx.strokeStyle = color;\n     ctx.lineWidth = strokeSize;\n      ctx.beginPath();\n      \n      // ctx.moveTo(e.clientX, e.clientY);\n      if (e.type === 'touchmove'){\n        ctx.moveTo(e.touches[0].clientX, e.touches[0].clientY);\n      } else if (e.type === 'mousemove'){\n        ctx.moveTo(e.clientX, e.clientY);\n      }\n    }\n  \n    //event listeners\n    canvas.addEventListener(\"mousedown\", startPosition);\n    canvas.addEventListener(\"touchstart\", startPosition);\n    canvas.addEventListener(\"mouseup\", endPosition);\n    canvas.addEventListener(\"touchend\", endPosition);\n    canvas.addEventListener(\"mousemove\", draw);\n    canvas.addEventListener(\"touchmove\", draw);\n  });\n\n  return (\n    <div className=\"App\">\n\n        <div id=\"colorButtonBox\">\n    <div id=\"colorButton\" className=\"black\" onClick={()=>changeColorAndSize('black',5)}></div>\n    <div id=\"colorButton\" className=\"red\" onClick={()=>changeColorAndSize('red',5)}></div>\n    <div id=\"colorButton\" className=\"green\" onClick={()=>changeColorAndSize('green',5)}></div>\n    <div id=\"colorButton\" className=\"blue\" onClick={()=>changeColorAndSize('blue',5)}></div>\n    <div id=\"colorButton\" className=\"yellow\" onClick={()=>changeColorAndSize('yellow',5)}></div>\n    <div id=\"colorButton\" className=\"purple\" onClick={()=>changeColorAndSize('purple',5)}></div>\n    <div id=\"colorButton\" className=\"grey\" onClick={()=>changeColorAndSize('grey',5)}></div>\n    <div id=\"eraserButton\" onClick={()=>changeColorAndSize('white',100)}></div>\n  </div>\n  {/* <PureCanvas id=\"canvas\" ref={canvasRef} /> */}\n  {/* <canvas id=\"canvas\"></canvas> */}\n  <canvas id='canvas' style={{position:'fixed', left:'0px', top:'0px'}}></canvas>\n    </div>\n  );\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (\n    // process.env.NODE_ENV === 'production' && \n  'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    console.log('serviceWorker register')\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    console.log(publicUrl.origin, window.location.origin)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        console.log('serviceWorker registerValidSW')\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  console.log('regist')\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('installed work')\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}