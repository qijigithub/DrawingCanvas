{"version":3,"sources":["Canvas.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Canvas","onStart","onDraw","onEnd","onStop","height","width","className","canvasRef","React","useRef","useState","x","y","start","setStart","useEffect","canvas","current","style","startDrawing","nativeEvent","offsetX","offsetY","window","TouchEvent","changedTouches","length","clientX","offsetLeft","clientY","offsetTop","bound","getBoundingClientRect","normalizeX","normalizeY","finishDrawing","draw","context","getContext","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","onTouchMove","App","test","navigator","userAgent","MSStream","drawing","setDrawing","pencil","setPencil","innerHeight","setHeight","innerWidth","setWidth","containerRef","selectColor","number","addEventListener","event","removeEventListener","Container","maxWidth","sx","border","id","sy","cx","cy","fillStyle","fillRect","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","console","log","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","publicUrl","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d5e881b1.chunk.js","sourcesContent":["import React from 'react'\n// function Point(x, y) {\n//     this.x = x;\n//     this.y = y;\n//   }\nconst Canvas = ({onStart,onDraw, onEnd, onStop,height, width, className }) => {\nconst canvasRef = React.useRef(null)\nconst [start, setStart] = React.useState({x:0,y:0})\n// const { Height, Width } = canvasStore;\nReact.useEffect(()=>{\nconst canvas = canvasRef.current;\nif(!canvas) {\n    return\n}\ncanvas.height = height;\ncanvas.width = width;\ncanvas.style.width = \"100%\"\ncanvas.style.height = \"100%\"\n}, [width,height])\n\nconst startDrawing = ({nativeEvent}) => {\n    let {offsetX, offsetY} = nativeEvent\n    const canvas = canvasRef.current\n    if(!canvas) {\n        return\n    }\n    if(window.TouchEvent){\n        if(nativeEvent.changedTouches?.length){\n          offsetX = nativeEvent.changedTouches[0].clientX - canvas.offsetLeft;\n          offsetY = nativeEvent.changedTouches[0].clientY - canvas.offsetTop;\n        }\n      }\n    const bound = canvas.getBoundingClientRect()\n    const normalizeX = offsetX/bound.width\n    const normalizeY = offsetY/bound.height\n    setStart({x:normalizeX,y:normalizeY})\n    onStart()\n}\n\nconst finishDrawing = () => {\n    onEnd()\n}\nconst draw = ({nativeEvent}) => {\n    let {offsetX, offsetY} = nativeEvent\n    const canvas = canvasRef.current\n    if(!canvas) {\n        return\n    }\n    if(window.TouchEvent){\n        if(nativeEvent.changedTouches?.length){\n          offsetX = nativeEvent.changedTouches[0].clientX - canvas.offsetLeft;\n          offsetY = nativeEvent.changedTouches[0].clientY - canvas.offsetTop;\n        }\n      }\n    const context = canvas.getContext('2d')\n    const bound = canvas.getBoundingClientRect()\n    const normalizeX = offsetX/bound.width\n    const normalizeY = offsetY/bound.height\n    onDraw(context,start.x,start.y,normalizeX, normalizeY)\n    setStart({x:normalizeX,y:normalizeY})\n}\nconst canvasLeave = () => {\n    onStop()\n}\n  return (\n    <canvas \n    ref={canvasRef} \n    onMouseDown={startDrawing} \n    onMouseMove={draw} \n    onMouseUp={finishDrawing} \n    onMouseLeave={canvasLeave}     \n    onTouchStart={startDrawing}\n    onTouchEnd={finishDrawing}\n    onTouchMove={draw}\n    className={className}></canvas>\n  )\n}\n\nexport default Canvas","\nimport React from 'react';\nimport './App.css';\nimport Canvas from './Canvas';\nimport Container from '@mui/material/Container';\nexport const App= ()=>{\n\n  var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; \n//////////////////\nconst [drawing, setDrawing] = React.useState(false)\nconst [pencil, setPencil] = React.useState(0)\nconst [height, setHeight] = React.useState(window.innerHeight)\nconst [width, setWidth] = React.useState(window.innerWidth)\nconst containerRef =React.useRef(null)\n\nconst onDrawing = (context, sx, sy, cx, cy) => {\n  if(!drawing) {\n    return\n  }\n  // if(pencil === 0) {\n  //   sx *= width;\n  //   sy *= height;\n  //   cx *= width;\n  //   cy *= height;\n  //   context.beginPath();\n  //   context.moveTo(sx,sy);\n  //   context.lineTo(cx,cy);\n  //   // context.fillStyle = \"black\"\n  //   context.strokeStyle = 'black'\n  //   context.lineWidth = 5\n  //   context.stroke();\n  // } else \n  if(pencil === 0) {\n    cx *= width;\n    cy *= height;\n    context.fillStyle = \"white\"\n    context.fillRect(cx,cy,100,100)\n  } else{\n    sx *= width;\n    sy *= height;\n    cx *= width;\n    cy *= height;\n    context.beginPath();\n    context.moveTo(sx,sy);\n    context.lineTo(cx,cy);\n    switch (pencil) {\n      case 1: context.strokeStyle = 'black'; break;\n      case 2: context.strokeStyle = 'red'; break;\n      case 3: context.strokeStyle = 'blue';break;\n      case 4: context.strokeStyle = 'green';break;\n      case 5: context.strokeStyle = 'yellow';break;\n      case 6: context.strokeStyle = 'purple';break;\n      case 7: context.strokeStyle = 'grey';break;\n    }\n    context.lineWidth = 5\n    context.stroke();\n  }\n}\n\nconst startDrawing = () =>setDrawing(true)\nconst endDrawing =()=>setDrawing(false)\nconst onExit = ()=> {\n  if(drawing){\n    setDrawing(false)\n  }\n}\n// React.useEffect(()=>{\n//   setDrawing(true)\n// }, [])\nconst selectEraser = () => setPencil(0)\nconst selectPencil = () => {\n  setPencil(1)\n}\nconst selectColor = (number) => {\n  setPencil(number)\n}\n\nReact.useEffect(()=>{\n  window.addEventListener('resize', (event)=> {\n    setWidth(window.innerWidth)\n    setHeight(window.innerHeight)\n    })\n    return ()=> {\n      window.removeEventListener('resize',()=>{})\n    }\n}, [containerRef.current])\n\n//////////////////\n\nreturn (\n  <Container maxWidth=\"lg\" sx={{border: '1px solid yellow'}}>\n  <div ref={containerRef}>\n  <Canvas id=\"canvas\" onDraw={onDrawing} onStart={startDrawing} onStop={endDrawing} onEnd={onExit} height={height} width={width}/>\n  </div>\n  <div id=\"colorButtonBox\">\n  <div id=\"colorButton\" className=\"black\" onClick={selectPencil}></div>\n  <div id=\"colorButton\" className=\"red\" onClick={()=>selectColor(2)}></div>\n    <div id=\"colorButton\" className=\"blue\" onClick={()=>selectColor(3)}></div>\n    <div id=\"colorButton\" className=\"green\" onClick={()=>selectColor(4)}></div>\n    <div id=\"colorButton\" className=\"yellow\" onClick={()=>selectColor(5)}></div>\n    <div id=\"colorButton\" className=\"purple\" onClick={()=>selectColor(6)}></div>\n    <div id=\"colorButton\" className=\"grey\" onClick={()=>selectColor(7)}></div>\n    <div id=\"eraserButton\" className=\"white\" onClick={selectEraser}></div>\n    {/* <button onClick={selectPencil}>pencil</button>\n    <button onClick={selectEraser}>eraser</button> */}\n  </div>\n  </Container>\n)\n\n\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (\n    // process.env.NODE_ENV === 'production' && \n  'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    console.log('serviceWorker register')\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    console.log(publicUrl.origin, window.location.origin)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        console.log('serviceWorker registerValidSW')\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  console.log('regist')\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('installed work')\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}